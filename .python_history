a=lambda x:x+1
a
lambda x:x+1
(lambda x:x+1)
(lambda x:x+1)()
(lambda x:x+1)(5)
a(7)
a.__sizeof__()
a.__str__()
a.__repr__()
a.__qualname__
a.__name__
a.__globals__
a.__dir__()
a.__dict__
a.__code__
a
a.__closure__
b=a.__code__
b
b.co_argcount
b.co_code
lambda x:x+'abc'
b=a.__code__
b.co_code
b[0]
a[0]
dir(b)
sizeof(b)
b.__sizeof__()
a.__sizeof__()
str(b)
54+54
import ctype
import ctypes
ctypes.cdll
ctypes.cdll.msvcrt
x=ctypes.cdll.msvcrt
x.memset
help(ctypes)
exit
exit()
help(ctypes)
import ctypes
help(ctypes)
history
history()
y=1
id(1)
ctypes.string_at(id(1),1)
ctypes.string_at(id(1),2)
id(1)
ctypes.string_at(id(1),0)
ctypes.string_at(id(1),3)
ctypes.string_at(id(1),4)
ctypes.string_at(id(1),5)
ctypes.string_at(id(1),8)
ctypes.string_at(id(1),9)
ctypes.string_at(id(1),16)
ctypes.string_at(id(1),32)
id(1)
id(2)
id(3)
id(0)
ctypes.string_at(id(0),16)
ctypes.string_at(id(0)+16,16)
ctypes.string_at(id(0)+16*2,16)
ctypes.string_at(id(0)+16*3,16)
ctypes.string_at(id(0)+16*4,16)
hex(id(0))
hex(id(1))
ctypes.string_at(id(0)+16*5,16)
ctypes.string_at(id(0)+16*7,16)
ctypes.string_at(id(0)+16*9,16)
x='abcd'
ctypes.string_at(id(x)+16*0,16)
ctypes.string_at(id(x)+16*0,32)
#ctypes.string_at(0xc1bfd6fd7f+16*0,32)
#pozpatkuuuu ctypes.string_at(0xc1bfd6fd7f+16*0,32)
